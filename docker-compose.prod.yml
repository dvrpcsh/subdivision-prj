# ===================================================================
# 운영 서버(Production) 전용 Docker Compose 파일 (최종 수정)
# ===================================================================
services:
  app:
    # 💡 [참고] 이 부분은 GitHub Actions가 실제 이미지 이름으로 교체해줍니다.
    image: DOCKER_IMAGE_PLACEHOLDER
    container_name: subdivision-app
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    # 💡 [핵심 수정] env_file 지시어를 추가하여 .env 파일의 모든 변수들을
    # 이 컨테이너의 환경 변수로 설정합니다.
    # 이제 Spring Boot가 ${DB_USERNAME}을 'admin'으로 올바르게 인식할 것입니다.
    env_file:
      - ./.env

  db:
    image: mysql:8.0
    container_name: subdivision-db
    ports:
      - "3306:3306"
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # 💡 일관성을 위해 db 서비스에도 env_file을 명시적으로 추가합니다.
    # 이제 MYSQL_ROOT_PASSWORD, MYSQL_USER 등도 .env 파일에서 값을 가져옵니다.
    env_file:
      - ./.env
    volumes:
      - db-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:latest
    container_name: subdivision-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  db-data:
  redis-data:

