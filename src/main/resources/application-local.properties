# ===================================================================
# Docker ?? ?? ?? ?? ?? (local profile)
# ===================================================================

# === DATABASE ?? ===
# Docker ???? ???? 'db'?? ??? ???? MySQL ????? ?????.
spring.datasource.url=jdbc:mysql://db:3306/nottori_db?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8&allowPublicKeyRetrieval=true
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# === JPA(ORM) ?? ===
# create-drop: Docker ????? ??? ??? DB? ????? ?? ??? ???? ???? ? ????. (????? ??? ??)
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# === JWT ??? ===
jwt.secret=${JWT_SECRET}

# === AWS S3 ?? (local??? ???? ? ??? ???) ===
cloud.aws.s3.enabled=true
spring.cloud.aws.auto.enabled=true
cloud.aws.s3.bucket=${AWS_S3_BUCKET}
cloud.aws.region.static=${AWS_REGION}
cloud.aws.credentials.access-key=${AWS_ACCESS_KEY}
cloud.aws.credentials.secret-key=${AWS_SECRET_KEY}

# === Redis ?? ===
# Docker ???? ???? 'redis'?? ??? ???? Redis ????? ?????.
spring.redis.host=redis
spring.redis.port=6379

# === OAuth2 ????? ?? ===
# ?? ?? ??? .env ????? ?????.
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=profile, email

spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}
spring.security.oauth2.client.registration.naver.redirect-uri=http://localhost:8080/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=name, email, profile_image
spring.security.oauth2.client.registration.naver.client-name=Naver

spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}
spring.security.oauth2.client.registration.kakao.redirect-uri=http://localhost:8080/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname, account_email
spring.security.oauth2.client.registration.kakao.client-name=Kakao
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
```
