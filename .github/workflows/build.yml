# ===================================================================
# GitHub Actions 워크플로우: Spring Boot 빌드, Docker 이미지 푸시, EC2 서버 자동 배포
# ===================================================================
name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # ===================================================================
  # 1. 빌드 및 Docker 이미지 푸시 작업 (변경 없음)
  # ===================================================================
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest

  # ===================================================================
  # 2. 원격 서버에 배포하는 작업
  # ===================================================================
  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV_PROD }}" > .env

      - name: Replace placeholder in docker-compose file
        run: |
          sed -i 's|DOCKER_IMAGE_PLACEHOLDER|${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest|g' docker-compose.prod.yml

      # 💡 [개선] scp와 ssh를 하나의 Action으로 통합하여 워크플로우를 간결하게 만듭니다.
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포할 디렉토리를 생성하고 이동합니다.
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/subdivision
            cd /home/${{ secrets.EC2_USERNAME }}/subdivision
            
            # 💡 이 Action 내부에서 .env 파일을 직접 생성합니다.
            echo "${{ secrets.ENV_PROD }}" > .env
            
            # Git 저장소에서 최신 버전의 배포 파일들을 직접 다운로드합니다.
            curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/master/docker-compose.prod.yml
            curl -o deploy.sh https://raw.githubusercontent.com/${{ github.repository }}/master/deploy.sh

            # 다운로드 받은 파일의 이미지 플레이스홀더를 실제 값으로 교체합니다.
            sed -i 's|DOCKER_IMAGE_PLACEHOLDER|${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest|g' docker-compose.yml
            
            # 배포 스크립트에 실행 권한을 부여합니다.
            chmod +x deploy.sh
            
            # Docker Hub 비밀번호를 환경 변수로 설정합니다.
            export DOCKER_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}
            
            # 최종적으로 배포 스크립트를 실행합니다.
            ./deploy.sh ${{ secrets.DOCKERHUB_USERNAME }} subdivision-prj ./.env

