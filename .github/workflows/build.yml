# ===================================================================
# GitHub Actions 워크플로우: Spring Boot 빌드, Docker 이미지 푸시, EC2 서버 자동 배포
# ===================================================================
name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # ===================================================================
  # 1. 빌드 및 Docker 이미지 푸시 작업 (변경 없음)
  # ===================================================================
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest

  # ===================================================================
  # 💡 [최종 수정] 2. 원격 서버에 배포하는 작업 (안정성 강화)
  # ===================================================================
  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 2-1. 배포할 파일들을 .zip 파일로 압축하는 단계는 동일합니다.
      - name: Create deployment package
        run: zip -r deploy.zip docker-compose.yml .env deploy.sh

      # 2-2. [핵심] SSH Action의 기능을 활용하여 파일 복사와 스크립트 실행을 명확하게 분리합니다.
      - name: Deploy to EC2 instance
        # 💡 [수정 1] ssh-action의 버전을 최신 버전(@master)으로 업데이트하여 source, target 기능을 사용합니다.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.zip" # 1. 로컬의 'deploy.zip' 파일을
          target: "/home/${{ secrets.EC2_USERNAME }}/subdivision" # 2. 원격 서버의 '/home/ubuntu/subdivision' 디렉토리로 복사합니다.

          # 3. 파일 복사가 성공적으로 끝난 뒤, 원격 서버에서 아래 스크립트를 실행합니다.
          script: |
            # 💡 [수정 2] 서버에 필요한 패키지(unzip)가 설치되어 있도록 보장합니다.
            sudo apt-get update
            sudo apt-get install -y unzip
            
            # 💡 [수정 3] 작업 디렉토리로 이동합니다. -p 옵션은 디렉토리가 없으면 자동으로 생성해줍니다.
            cd /home/${{ secrets.EC2_USERNAME }}/subdivision
            
            # 압축을 해제합니다. (-o 옵션은 확인 없이 기존 파일을 덮어씁니다)
            unzip -o deploy.zip
            
            # 배포 스크립트에 실행 권한을 부여합니다.
            chmod +x deploy.sh
            
            # Docker Hub 비밀번호를 환경 변수로 설정하여 deploy.sh 스크립트에서 사용할 수 있게 합니다.
            export DOCKER_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}
            
            # 최종적으로 배포 스크립트를 실행합니다.
            ./deploy.sh ${{ secrets.DOCKERHUB_USERNAME }} subdivision-prj ./.env

