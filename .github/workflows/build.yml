# ===================================================================
# GitHub Actions 워크플로우: Spring Boot 빌드 및 Docker 이미지 푸시
# ===================================================================
name: Java CI/CD with Gradle and Docker

# 1. 워크플로우 트리거 설정 (이전과 동일)
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

# 2. 실행될 작업(Job) 정의
jobs:
  build-and-push-image: # 작업 이름을 더 명확하게 변경
    runs-on: ubuntu-latest

    # 3. 작업의 실행 단계 (Steps) 정의
    steps:
      # 3-1. 소스 코드 체크아웃 (이전과 동일)
      - uses: actions/checkout@v4

      # 3-2. JDK 17 설치 (이전과 동일)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3-3. Gradle 실행 권한 부여 (이전과 동일)
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 3-4. Gradle로 프로젝트 빌드 (이전과 동일)
      - name: Build with Gradle
        run: ./gradlew build -x test

      # 💡 [CD 단계 추가] 3-5. Docker Hub에 로그인
      # GitHub Secrets에 저장된 Docker Hub 사용자 이름과 토큰을 사용하여 로그인합니다.
      # 이렇게 하면 실제 비밀번호가 코드에 노출되지 않아 안전합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 💡 [CD 단계 추가] 3-6. Docker 이미지 빌드 및 푸시
      # 'docker/build-push-action'을 사용하여 Dockerfile로 이미지를 빌드하고,
      # Docker Hub 저장소에 자동으로 푸시(업로드)합니다.
      # 태그(tag)는 Docker Hub 사용자 이름과 프로젝트 이름으로 지정됩니다.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest

