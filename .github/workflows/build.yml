# ===================================================================
# GitHub Actions 워크플로우: Spring Boot 빌드, Docker 이미지 푸시, EC2 서버 자동 배포
# ===================================================================
name: Java CI/CD with Gradle and Docker

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  # ===================================================================
  # 1. 빌드 및 Docker 이미지 푸시 작업 (변경 없음)
  # ===================================================================
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        run: ./gradlew build -x test
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest

  # ===================================================================
  # 2. 원격 서버에 배포하는 작업
  # ===================================================================
  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV_PROD }}" > .env

      # 💡 [핵심 수정 1] 배포 패키지를 만들기 전에, docker-compose.prod.yml 파일의 내용을 수정합니다.
      - name: Replace placeholder in docker-compose file
        # 'sed' 명령어를 사용하여 DOCKER_IMAGE_PLACEHOLDER를 실제 이미지 이름으로 교체합니다.
        run: |
          sed -i 's|DOCKER_IMAGE_PLACEHOLDER|${{ secrets.DOCKERHUB_USERNAME }}/subdivision-prj:latest|g' docker-compose.prod.yml

      - name: Create deployment package
        run: zip -r deploy.zip docker-compose.prod.yml .env deploy.sh

      - name: Copy deployment package to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.zip"
          target: "/home/${{ secrets.EC2_USERNAME }}/subdivision"

      - name: Deploy on EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            mkdir -p /home/${{ secrets.EC2_USERNAME }}/subdivision
            cd /home/${{ secrets.EC2_USERNAME }}/subdivision
            
            unzip -o deploy.zip
            
            mv docker-compose.prod.yml docker-compose.yml
            
            chmod +x deploy.sh
            
            export DOCKER_PASSWORD=${{ secrets.DOCKERHUB_TOKEN }}
            
            ./deploy.sh ${{ secrets.DOCKERHUB_USERNAME }} subdivision-prj ./.env

